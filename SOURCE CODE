// XOR Gate - Verilog Representation of the 2T XOR Gate
module xor_gate (
input a,
input b,
output y
);
assign y = a ^ b; // XOR operation
endmodule
// 2:4 Decoder - Used to control which operation is selected in the ALU
module decoder_2x4 (
input [1:0] select,
output reg [3:0] out
);
always @(*) begin
case (select)
2'b00: out = 4'b0001; // Select Operation 0 (Addition)
2'b01: out = 4'b0010; // Select Operation 1 (Subtraction)
2'b10: out = 4'b0100; // Select Operation 2 (AND)
2'b11: out = 4'b1000; // Select Operation 3 (XOR)
default: out = 4'b0000; // Default case
endcase
end
endmodule
// 8-bit ALU Module
module alu_8bit (
input [7:0] A, // 8-bit Input A
input [7:0] B, // 8-bit Input B
input [1:0] select, // 2-bit selection from decoder to 
choose operation
output reg [7:0] result, // 8-bit ALU result
output carry_out // Carry output (for addition and 
subtraction)
);
wire [7:0] sum, diff, and_op, xor_op;
wire [3:0] control; // 4-bit control signal from decoder
// Instantiate the 2T XOR gate module for each bit
xor_gate xor0(.a(A[0]), .b(B[0]), .y(xor_op[0]));
xor_gate xor1(.a(A[1]), .b(B[1]), .y(xor_op[1]));
xor_gate xor2(.a(A[2]), .b(B[2]), .y(xor_op[2]));
xor_gate xor3(.a(A[3]), .b(B[3]), .y(xor_op[3]));
xor_gate xor4(.a(A[4]), .b(B[4]), .y(xor_op[4]));
xor_gate xor5(.a(A[5]), .b(B[5]), .y(xor_op[5]));
xor_gate xor6(.a(A[6]), .b(B[6]), .y(xor_op[6]));
xor_gate xor7(.a(A[7]), .b(B[7]), .y(xor_op[7]));
// Perform Arithmetic Operations
assign {carry_out, sum} = A + B; // Addition
assign diff = A - B; // Subtraction
// Perform Logical Operations
assign and_op = A & B; // AND 
Operation
// Instantiate the 2:4 decoder
decoder_2x4 dec(.select(select), 
.out(control));
// ALU Result Selection Based on Decoder 
Output
always @(*) begin
case (control)
4'b0001: result = sum; // Addition
4'b0010: result = diff; // Subtraction
4'b0100: result = and_op; // AND
4'b1000: result = xor_op; // XOR
default: result = 8'b00000000; // Default: 
No operation
endcase
end
endmodule
