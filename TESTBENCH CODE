module design_tb; 
// Inputs
reg [7:0] A; 
reg [7:0] B; 
reg [1:0] select; 
// Outputs 
wire [7:0] result; 
wire carry_out; 
// Instantiate the ALU module 
alu uut( .A(A), .B(B), .select(select), .result(result), .carry_out(carry_out) ); 
// Test vectors and stimulus initial begin 
// Monitor outputs
$monitor("Time: %0d A=%b B=%b select=%b -> result=%b carry_out=%b", $time, A, B, select, result, 
carry_out); // Initialize Inputs and apply test cases
// Test Case 1: Addition (A + B)
A = 8'b00001111; // 15 in decimal 
B = 8'b00000001; // 1 in decimal 
select = 2'b00; // Select addition operation 
#10; // Wait 10 time units
// Test Case 2: Subtraction (A - B) 
A = 8'b00010010; // 18 in decimal 
B = 8'b00000011; // 3 in decimal 
select = 2'b01; // Select subtraction operation
#10; // Wait 10 time units 
Testbench Code
// Test Case 3: AND Operation (A & B) 
A = 8'b11001100; // A = 204
B = 8'b10101010; // B = 170 
select = 2'b10; // Select AND operation
#10; // Wait 10 time units 
// Test Case 4: XOR Operation (A ^ B) 
A = 8'b11110000; // A = 240 
B = 8'b00001111; // B = 15 
select = 2'b11; // Select XOR operation 
#10; // Wait 10 time units
// Test overflow in addition 
A = 8'b11111111; // A = 255 
B = 8'b00000001; // B = 1 
select = 2'b00; // Select addition operation 
#10; // Wait 10 time units
// Test Case 5: Subtraction with negative result 
A = 8'b00000001; // A = 1 
B = 8'b00000010; // B = 2 
select = 2'b01; // Select subtraction operation 
#10; // Wait 10 time units 
// Test complete 
$finish; // End the simulation 
end 
endmodule
